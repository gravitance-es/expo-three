{"version":3,"file":"loadModelsAsync.js","sourceRoot":"","sources":["../../src/loaders/loadModelsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\r\nimport { Platform } from 'react-native';\r\nimport { FileLoader } from 'three';\r\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\r\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\n\r\nimport readAsStringAsync from './readAsStringAsync';\r\n\r\nasync function loadFileAsync({ asset, funcName }): Promise<string | null> {\r\n  if (!asset) {\r\n    throw new Error(`ExpoTHREE.${funcName}: Cannot parse a null asset`);\r\n  }\r\n\r\n  const nativeAsset = Asset.fromModule(asset);\r\n  await nativeAsset.downloadAsync();\r\n\r\n  return nativeAsset.localUri ?? null;\r\n}\r\n\r\nexport async function loadMtlAsync({ asset, onAssetRequested }): Promise<any> {\r\n  const uri = await loadFileAsync({\r\n    asset,\r\n    funcName: 'loadMtlAsync',\r\n  });\r\n  if (!uri) return;\r\n\r\n  const loader = new MTLLoader();\r\n  loader.setPath(onAssetRequested);\r\n\r\n  if (Platform.OS === 'web') {\r\n    return await new Promise((resolve, reject) =>\r\n      loader.load(uri, resolve, () => {}, reject)\r\n    );\r\n  }\r\n\r\n  return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\r\n}\r\n\r\nexport async function loadObjAsync(options: {\r\n  asset: any;\r\n  onAssetRequested?: (...args: any[]) => any;\r\n  onMtlAssetRequested?: (...args: any[]) => any;\r\n  mtlAsset?: any;\r\n  materials?: any;\r\n}): Promise<any> {\r\n  const { asset, onAssetRequested, onMtlAssetRequested, mtlAsset, materials } =\r\n    options;\r\n  let nextMaterials = materials;\r\n  if (nextMaterials == null && mtlAsset != null) {\r\n    nextMaterials = await loadMtlAsync({\r\n      asset: mtlAsset,\r\n      onAssetRequested: onMtlAssetRequested || onAssetRequested,\r\n    });\r\n    nextMaterials.preload();\r\n  }\r\n\r\n  const uri = await loadFileAsync({\r\n    asset,\r\n    funcName: 'loadObjAsync',\r\n  });\r\n  if (!uri) return;\r\n\r\n  const loader = new OBJLoader();\r\n  if (onAssetRequested) {\r\n    loader.setPath(onAssetRequested as any);\r\n  }\r\n  if (nextMaterials != null) {\r\n    loader.setMaterials(nextMaterials);\r\n  }\r\n\r\n  if (Platform.OS === 'web') {\r\n    return await new Promise((resolve, reject) =>\r\n      loader.load(uri, resolve, () => {}, reject)\r\n    );\r\n  }\r\n\r\n  return loadFileContentsAsync(loader, uri, 'loadObjAsync');\r\n}\r\n\r\nexport async function loadDaeAsync({\r\n  asset,\r\n  onAssetRequested,\r\n  onProgress,\r\n}): Promise<any> {\r\n  const uri = await loadFileAsync({\r\n    asset,\r\n    funcName: 'loadDaeAsync',\r\n  });\r\n  if (typeof uri !== 'string' || uri == null) {\r\n    return;\r\n  }\r\n\r\n  return new Promise((res, rej) =>\r\n    new FileLoader().load(\r\n      uri!,\r\n      (text) => {\r\n        // @ts-ignore\r\n        const loader = new ColladaLoader();\r\n        const parsedResult = (loader.parse as any)(text, onAssetRequested);\r\n        res(parsedResult);\r\n      },\r\n      onProgress,\r\n      rej\r\n    )\r\n  );\r\n}\r\n\r\nasync function loadFileContentsAsync(loader, uri, funcName): Promise<any> {\r\n  try {\r\n    const fileContents = await readAsStringAsync(uri);\r\n    return loader.parse(fileContents);\r\n  } catch ({ message }) {\r\n    // Or model loader THREE.OBJLoader failed to parse fileContents\r\n    throw new Error(\r\n      `ExpoTHREE.${funcName}: Expo.FileSystem Failed to read uri: ${uri}. ${message}`\r\n    );\r\n  }\r\n}\r\n\r\nexport async function loadArrayBufferAsync({ uri, onProgress }): Promise<any> {\r\n  const loader = new FileLoader();\r\n  loader.setResponseType('arraybuffer');\r\n  return new Promise((res, rej) => loader.load(uri, res, onProgress, rej));\r\n}\r\n"]}