{"version":3,"file":"loadAsync.js","sourceRoot":"","sources":["../src/loadAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\r\n\r\nimport {\r\n  loaderClassForExtension,\r\n  loaderClassForUri,\r\n} from './loaderClassForExtension';\r\nimport {\r\n  loadDaeAsync,\r\n  loadObjAsync,\r\n  loadMtlAsync,\r\n  loadArrayBufferAsync,\r\n} from './loaders/loadModelsAsync';\r\nimport './polyfillTextureLoader.fx';\r\nimport { loadTextureAsync } from './loaders/loadTextureAsync';\r\nimport { ProgressCallback } from './loading.types';\r\nimport resolveAsset, { stringFromAsset } from './resolveAsset';\r\nimport { matchUrlExtension, matchUrlExtensions } from './utils';\r\n\r\nexport async function loadBasicModelAsync(options: {\r\n  uri: string;\r\n  onProgress?: ProgressCallback;\r\n  onAssetRequested: any;\r\n  loader?: any;\r\n  LoaderClass: any;\r\n}) {\r\n  const { uri, onProgress, onAssetRequested, loader, LoaderClass } = options;\r\n  const _loader = loader || new LoaderClass();\r\n  if (_loader.setPath) {\r\n    _loader.setPath(onAssetRequested);\r\n  }\r\n  return new Promise((res, rej) => _loader.load(uri, res, onProgress, rej));\r\n}\r\n\r\nexport default async function loadAsync(\r\n  res,\r\n  onProgress?: ProgressCallback,\r\n  onAssetRequested: (...args: any[]) => any = function () {}\r\n) {\r\n  const urls = await resolveAsset(res);\r\n  if (!urls) {\r\n    throw new Error(\r\n      `ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: ${res}.`\r\n    );\r\n  }\r\n  const asset = urls[0];\r\n  \r\n  const resolvedAsset = Asset.fromModule(asset);\r\n  await resolvedAsset.downloadAsync();\r\n  const url: string | null = resolvedAsset.localUri;\r\n\r\n  if (url == null) {\r\n    throw new Error(\r\n      `ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.`\r\n    );\r\n  }\r\n\r\n  if (urls.length === 1) {\r\n    if (matchUrlExtensions(url, ['jpeg', 'jpg', 'gif', 'png'])) {\r\n      return loadTextureAsync({ asset });\r\n    } else if (matchUrlExtension(url, 'dae')) {\r\n      return loadDaeAsync({\r\n        asset: url,\r\n        onProgress,\r\n        onAssetRequested,\r\n      });\r\n    } else if (matchUrlExtensions(url, ['glb', 'gltf'])) {\r\n      const arrayBuffer = await loadArrayBufferAsync({ uri: url, onProgress });\r\n      const GLTFLoader = loaderClassForExtension('gltf');\r\n      const loader = new GLTFLoader();\r\n      return new Promise((res, rej) =>\r\n        loader.parse(arrayBuffer, onAssetRequested, res, rej)\r\n      );\r\n    } else if (matchUrlExtension(url, 'json')) {\r\n      throw new Error(\r\n        'loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.'\r\n      );\r\n    } else if (matchUrlExtension(url, 'obj')) {\r\n      console.log('loading obj');\r\n      return loadObjAsync({ asset: url, onAssetRequested });\r\n    } else if (matchUrlExtension(url, 'mtl')) {\r\n      return loadMtlAsync({ asset: url, onAssetRequested });\r\n    } else {\r\n      const LoaderClass = loaderClassForUri(url);\r\n      return loadBasicModelAsync({\r\n        uri: url,\r\n        onProgress,\r\n        onAssetRequested,\r\n        LoaderClass,\r\n      });\r\n    }\r\n  } else if (urls.length === 2) {\r\n    const urlB = await stringFromAsset(urls[1]);\r\n    if (urlB != null) {\r\n      if (matchUrlExtension(url, 'mtl') && matchUrlExtension(urlB, 'obj')) {\r\n        return loadObjAsync({\r\n          asset: urlB,\r\n          mtlAsset: url,\r\n          onAssetRequested,\r\n        });\r\n      } else if (\r\n        matchUrlExtension(url, 'obj') &&\r\n        matchUrlExtension(urlB, 'mtl')\r\n      ) {\r\n        return loadObjAsync({\r\n          asset: url,\r\n          mtlAsset: urlB,\r\n          onAssetRequested,\r\n        });\r\n      }\r\n    }\r\n\r\n    throw new Error('Unrecognized File Type: ' + url);\r\n  } else {\r\n    throw new Error('Too many arguments passed: ' + urls);\r\n  }\r\n}\r\n"]}