{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import THREE from './Three';\r\n\r\nexport function alignMesh(mesh: THREE.Mesh, axis = { x: 0.5, y: 0.5, z: 0.5 }) {\r\n  const nAxis = axis || {};\r\n  const box = new THREE.Box3().setFromObject(mesh);\r\n\r\n  const size = new THREE.Vector3();\r\n  box.getSize(size);\r\n  const min = { x: -box.min.x, y: -box.min.y, z: -box.min.z };\r\n\r\n  for (const key of Object.keys(nAxis)) {\r\n    const scale = nAxis[key];\r\n    mesh.position[key] = min[key] - size[key] + size[key] * scale;\r\n  }\r\n}\r\n\r\nexport function scaleLongestSideToSize(mesh: THREE.Mesh, size: number) {\r\n  const sizedVector = new THREE.Vector3();\r\n  new THREE.Box3().setFromObject(mesh).getSize(sizedVector);\r\n\r\n  const { x: width, y: height, z: depth } = sizedVector;\r\n\r\n  const longest = Math.max(width, Math.max(height, depth));\r\n  const scale = size / longest;\r\n  mesh.scale.set(scale, scale, scale);\r\n}\r\n\r\n/** Used for smoothing imported meshes */\r\nexport function computeMeshNormals(mesh: THREE.Mesh) {\r\n  mesh.traverse(async (child: any) => {\r\n    if (child instanceof THREE.Mesh) {\r\n      /// Smooth geometry\r\n      child.geometry.mergeVertices();\r\n      child.geometry.computeVertexNormals();\r\n      child.geometry.computeFaceNormals();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Retrieves the file extension from a given URL.\r\n * @param url - The URL to extract the file extension from.\r\n * @returns The file extension, or an empty string if no extension is found.\r\n */\r\nexport const getUrlExtension = (url: string): string => {\r\n  // Split the URL by any hash or query parameters, and take the first part\r\n  const basePath = url.split(/[#?]/)[0];\r\n  // Split the basePath by slashes to check if the last segment contains a dot\r\n  const segments = basePath.split('/');\r\n  // Take the last segment after the final slash\r\n  const lastSegment = segments.pop();\r\n\r\n  // Check if the last segment exists and contains a dot, indicating a file extension\r\n  if (lastSegment && lastSegment.includes('.')) {\r\n    // If it does, split by dot and trim the last part (extension)\r\n    const extension = lastSegment.split('.').pop();\r\n    return extension ? extension.trim() : '';\r\n  }\r\n\r\n  // If there's no dot in the last segment, return an empty string as there's no extension\r\n  return '';\r\n};\r\n\r\n/**\r\n * Checks if the given URL has a matching extension from the provided list of extensions.\r\n * @param url - The URL to check.\r\n * @param extensions - An array of extensions to match against.\r\n * @returns A boolean indicating whether the URL has a matching extension.\r\n */\r\nexport const matchUrlExtensions = (\r\n  url: string,\r\n  extensions: string[]\r\n): boolean => {\r\n  const urlExtension = getUrlExtension(url);\r\n\r\n  return extensions.includes(urlExtension);\r\n};\r\n\r\nexport const matchUrlExtension = (url: string, extension: string): boolean => {\r\n  return matchUrlExtensions(url, [extension]);\r\n};\r\n"]}