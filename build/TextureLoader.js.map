{"version":3,"file":"TextureLoader.js","sourceRoot":"","sources":["../src/TextureLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAEnC,OAAO,KAAK,MAAM,SAAS,CAAC;AAE5B,MAAM,CAAC,OAAO,OAAO,iBAAkB,SAAQ,KAAK,CAAC,aAAa;IAChE,IAAI,CACF,KAAU,EACV,MAAyC,EACzC,UAA2C,EAC3C,OAAkC;QAElC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;QACJ,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAEpC,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1B,CAAC,KAAK,IAAI,EAAE;YACV,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,aAAa,EAAE,CAAC;YAElC,SAAS,UAAU,CAAC,KAAK;gBACvB,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;gBACtB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;gBAE3B,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;oBACzB,MAAM,CAAC,OAAO,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC;YAED,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;gBAC1B,MAAM,CAAC,IAAI,CACT,WAAW,CAAC,QAAS,EACrB,CAAC,KAAK,EAAE,EAAE;oBACR,UAAU,CAAC,KAAK,CAAC,CAAC;gBACpB,CAAC,EACD,UAAU,EACV,OAAO,CACR,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;oBAC9C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,OAAO,CAGxC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;wBACd,KAAK,CAAC,OAAO,CACX,WAAW,CAAC,QAAS,EACrB,CAAC,KAAa,EAAE,MAAc,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EACzD,GAAG,CACJ,CAAC;oBACJ,CAAC,CAAC,CAAC;oBACH,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;oBAC1B,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;gBAC9B,CAAC;gBACD,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC,kDAAkD;gBAEnF,UAAU,CAAC;oBACT,IAAI,EAAE,WAAW;oBACjB,KAAK,EAAE,WAAW,CAAC,KAAK;oBACxB,MAAM,EAAE,WAAW,CAAC,MAAM;iBAC3B,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,EAAE,CAAC;QAEL,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["import { Platform, Image } from 'react-native';\r\nimport { Asset } from 'expo-asset';\r\n\r\nimport THREE from './Three';\r\n\r\nexport default class ExpoTextureLoader extends THREE.TextureLoader {\r\n  load(\r\n    asset: any,\r\n    onLoad?: (texture: THREE.Texture) => void,\r\n    onProgress?: (event: ProgressEvent) => void,\r\n    onError?: (event: unknown) => void\r\n  ): THREE.Texture {\r\n    if (!asset) {\r\n      throw new Error(\r\n        'ExpoTHREE.TextureLoader.load(): Cannot parse a null asset'\r\n      );\r\n    }\r\n\r\n    const texture = new THREE.Texture();\r\n\r\n    const loader = new THREE.ImageLoader(this.manager);\r\n    loader.setCrossOrigin(this.crossOrigin);\r\n    loader.setPath(this.path);\r\n\r\n    (async () => {\r\n      const nativeAsset = Asset.fromModule(asset);\r\n      await nativeAsset.downloadAsync();\r\n\r\n      function parseAsset(image) {\r\n        texture.image = image;\r\n        texture.needsUpdate = true;\r\n\r\n        if (onLoad !== undefined) {\r\n          onLoad(texture);\r\n        }\r\n      }\r\n\r\n      if (Platform.OS === 'web') {\r\n        loader.load(\r\n          nativeAsset.localUri!,\r\n          (image) => {\r\n            parseAsset(image);\r\n          },\r\n          onProgress,\r\n          onError\r\n        );\r\n      } else {\r\n        if (!nativeAsset.width || !nativeAsset.height) {\r\n          const { width, height } = await new Promise<{\r\n            width: number;\r\n            height: number;\r\n          }>((res, rej) => {\r\n            Image.getSize(\r\n              nativeAsset.localUri!,\r\n              (width: number, height: number) => res({ width, height }),\r\n              rej\r\n            );\r\n          });\r\n          nativeAsset.width = width;\r\n          nativeAsset.height = height;\r\n        }\r\n        texture['isDataTexture'] = true; // Forces passing to `gl.texImage2D(...)` verbatim\r\n\r\n        parseAsset({\r\n          data: nativeAsset,\r\n          width: nativeAsset.width,\r\n          height: nativeAsset.height,\r\n        });\r\n      }\r\n    })();\r\n\r\n    return texture;\r\n  }\r\n}\r\n"]}