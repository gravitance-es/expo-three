{"version":3,"file":"loaderClassForExtension.js","sourceRoot":"","sources":["../src/loaderClassForExtension.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,0CAA0C,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AACnE,OAAO,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAC;AACjE,OAAO,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAC;AAEjE,SAAS,YAAY,CAAC,GAAW;IAC/B,MAAM,gBAAgB,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAY,CAAC;IACxD,OAAO,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,GAAW;IAC3C,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;IACpC,OAAO,uBAAuB,CAAC,SAAS,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,SAAiB;IACvD,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IACD,QAAQ,SAAS,CAAC,WAAW,EAAE,EAAE,CAAC;QAChC,KAAK,KAAK,CAAC;QACX,KAAK,MAAM;YACT,OAAO,UAAU,CAAC;QACpB,KAAK,KAAK;YACR,OAAO,SAAS,CAAC;QACnB,KAAK,KAAK;YACR,OAAO,SAAS,CAAC;QACnB,KAAK,KAAK;YACR,OAAO,aAAa,CAAC;QACvB;YACE,MAAM,IAAI,KAAK,CACb,8DAA8D;gBAC5D,SAAS,CACZ,CAAC;IACN,CAAC;AACH,CAAC","sourcesContent":["import { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\n\r\nfunction getExtension(uri: string): string {\r\n  const lastUriComponent = uri.split('.').pop() as string;\r\n  return lastUriComponent.split('?')[0].split('#')[0];\r\n}\r\n\r\nexport function loaderClassForUri(uri: string): string {\r\n  const extension = getExtension(uri);\r\n  return loaderClassForExtension(extension);\r\n}\r\n\r\nexport function loaderClassForExtension(extension: string): any {\r\n  if (typeof extension !== 'string') {\r\n    throw new Error('Supplied extension is not a valid string');\r\n  }\r\n  switch (extension.toLowerCase()) {\r\n    case 'glb':\r\n    case 'gltf':\r\n      return GLTFLoader;\r\n    case 'obj':\r\n      return OBJLoader;\r\n    case 'mtl':\r\n      return MTLLoader;\r\n    case 'dae':\r\n      return ColladaLoader;\r\n    default:\r\n      throw new Error(\r\n        'ExpoTHREE.loaderClassForExtension(): Unrecognized file type ' +\r\n          extension\r\n      );\r\n  }\r\n}\r\n"]}