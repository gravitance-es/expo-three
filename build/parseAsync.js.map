{"version":3,"file":"parseAsync.js","sourceRoot":"","sources":["../src/parseAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAC;AAE3D,KAAK,UAAU,oBAAoB,CAAC,EAClC,IAAI,EACJ,aAAa,EACb,MAAM,GACP;IACC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAChD,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AAC3C,CAAC;AASD,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,UAAU,CAAC,EACvC,IAAI,EACJ,MAAM,EACN,aAAa,GACH;IACV,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC9B,CAAC;IAED,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAC1E,CAAC;IAED,QAAQ,MAAM,EAAE,CAAC;QACf,KAAK,OAAO,CAAC;QACb,KAAK,QAAQ,CAAC;QACd,KAAK,MAAM,CAAC;QACZ,KAAK,SAAS;YACZ,OAAO,oBAAoB,CAAC;gBAC1B,IAAI;gBACJ,aAAa;gBACb,MAAM,EAAE,IAAI,YAAY,EAAE;aAC3B,CAAC,CAAC;QACL,KAAK,QAAQ;YACX,OAAO,oBAAoB,CAAC;gBAC1B,IAAI;gBACJ,aAAa;gBACb,MAAM,EAAE,IAAI,oBAAoB,EAAE;aACnC,CAAC,CAAC;QACL,KAAK,OAAO,CAAC;QACb;YACE,MAAM,IAAI,KAAK,CAAC,2BAA2B,MAAM,iBAAiB,CAAC,CAAC;IACxE,CAAC;AACH,CAAC","sourcesContent":["import { ObjectLoader, BufferGeometryLoader } from 'three';\r\n\r\nasync function parseWithLoaderAsync({\r\n  json,\r\n  assetProvider,\r\n  loader,\r\n}): Promise<any> {\r\n  loader.setPath && loader.setPath(assetProvider);\r\n  return loader.parse(json, assetProvider);\r\n}\r\n\r\ntype Parseable = {\r\n  json: any;\r\n  format?: string;\r\n  onProgress?: (...args: any[]) => any;\r\n  assetProvider: any;\r\n};\r\n\r\nexport default async function parseAsync({\r\n  json,\r\n  format,\r\n  assetProvider,\r\n}: Parseable): Promise<any> {\r\n  if (!format && json.metadata && json.metadata.type) {\r\n    format = json.metadata.type;\r\n  }\r\n\r\n  if (!format) {\r\n    throw new Error('ExpoTHREE.parseAsync(): Invalid null format provided');\r\n  }\r\n\r\n  switch (format) {\r\n    case 'clara':\r\n    case 'object':\r\n    case 'json':\r\n    case 'blender':\r\n      return parseWithLoaderAsync({\r\n        json,\r\n        assetProvider,\r\n        loader: new ObjectLoader(),\r\n      });\r\n    case 'buffer':\r\n      return parseWithLoaderAsync({\r\n        json,\r\n        assetProvider,\r\n        loader: new BufferGeometryLoader(),\r\n      });\r\n    case 'scene':\r\n    default:\r\n      throw new Error(`ExpoTHREE.parseAsync(): ${format} not supported.`);\r\n  }\r\n}\r\n"]}