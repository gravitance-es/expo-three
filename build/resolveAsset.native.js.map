{"version":3,"file":"resolveAsset.native.js","sourceRoot":"","sources":["../src/resolveAsset.native.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAEnC,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,YAAY,CACxC,aAAkB;IAElB,MAAM,IAAI,GAAY,EAAE,CAAC;IAEzB,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;IAE7E,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,KAAK,CAAC,aAAa,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,KAAqB;IAErB,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACpB,MAAM,KAAK,CAAC,aAAa,EAAE,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACpB,OAAO,CAAC,IAAI,CACV,4GAA4G,CAC7G,CAAC;QACJ,CAAC;QACD,OAAO,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC;IACrC,CAAC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { Asset } from 'expo-asset';\r\n\r\nexport default async function resolveAsset(\r\n  fileReference: any\r\n): Promise<Asset[]> {\r\n  const urls: Asset[] = [];\r\n\r\n  const files = Array.isArray(fileReference) ? fileReference : [fileReference];\r\n\r\n  for (const file of files) {\r\n    const asset = Asset.fromModule(file);\r\n    await asset.downloadAsync();\r\n    urls.push(asset);\r\n  }\r\n\r\n  return urls;\r\n}\r\n\r\nexport async function stringFromAsset(\r\n  asset: Asset | string\r\n): Promise<string | null> {\r\n  if (asset instanceof Asset) {\r\n    if (!asset.localUri) {\r\n      await asset.downloadAsync();\r\n    }\r\n    if (!asset.localUri) {\r\n      console.warn(\r\n        \"Warning: Asset localUri is still null after download. This may happen for unsupported file types like .mtl\"\r\n      );\r\n    }\r\n    return asset.localUri || asset.uri;\r\n  } else if (typeof asset === 'string') {\r\n    return asset;\r\n  }\r\n  return null;\r\n}\r\n"]}